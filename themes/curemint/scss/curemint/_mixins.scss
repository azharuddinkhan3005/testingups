// ----
// rem mixins
// ----

$rem-base: 16px !default;

@function rem-separator($list) {
  @if function-exists('list-separator') == true {
    @return list-separator($list);
  }
  $test-list: ();
  @each $item in $list {
    $test-list: append($test-list, $item, space);
  }
  @return if($test-list == $list, space, comma);
}

@mixin rem-base($zoom: 100%) {
  font-size: $zoom / 16px * $rem-base;
}

@function rem-convert($to, $values...) {
  $result: ();
  $separator: rem-separator($values);
  @each $value in $values {
    @if type-of($value) == 'number' and unit($value) == 'rem' and $to == 'px' {
      $result: append($result, $value / 1rem * $rem-base, $separator);
    } @else if type-of($value) == 'number' and unit($value) == 'px' and $to == 'rem' {
      $result: append($result, $value / ($rem-base / 1rem), $separator);
    } @else if type-of($value) == 'list' {
      $result: append($result, rem-convert($to, $value...), $separator);
    } @else { $result: append($result, $value, $separator); }
  }
  @return if(length($result) == 1, nth($result, 1), $result);
}

@function rem($values...) {
  @return rem-convert(rem, $values...);
}

@mixin rem($properties, $values...) {
  @if type-of($properties) == 'map' {
    @each $property in map-keys($properties) {
      @include rem($property, map-get($properties, $property));
    }
  } @else {
    @each $property in $properties {
      #{$property}: rem-convert(rem, $values...);
    }
  }
}

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@function convert-to-rem($value, $base-value: $rem-base) {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if ($value == 0) {
    $value: 0;
  } // Turn 0em into 0
  @return $value;
}

@function rem-calc($values, $base-value: $rem-base) {
  $max: length($values);
  @if $max == 1 {
    @return convert-to-rem(nth($values, 1), $base-value);
  }
  $remvalues: ();
  @for $i from 1 through $max {
    $remvalues: append($remvalues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remvalues;
}

// headings
@mixin heading {
  font-family: $helvetica-r;
}

@mixin heading-1 {
  @include heading;
  border: 0;
  color: $quartzcolor;
  font-size: rem-calc(20px);
  text-transform: uppercase;
}

@mixin heading-2 {
  @include heading;
  font-size: rem-calc(20px);
  text-transform: uppercase;
  margin-bottom: 18px;
  color: $quartzcolor;
}

@mixin heading-3 {
  color: $quartzcolor;
  font-family: $helvetica-r;
  font-size: rem-calc(20px);
  line-height: rem-calc(20px);
  margin-top: 0;
  margin-bottom: 0;
  padding-bottom: 33px;
}
